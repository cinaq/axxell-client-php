<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  Axxell
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * axxell-api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Axxell\Model;

use \ArrayAccess;

/**
 * Event Class Doc Comment
 *
 * @category    Class */
 // @description An event registered in the system
/** 
 * @package     Axxell
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Event implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'creation_time' => 'string',
        'event_type' => 'string',
        'event_id' => 'string',
        'event_time' => 'string',
        'entity_type' => 'string',
        'entity_id' => 'string',
        'target_entity_type' => 'string',
        'target_entity_id' => 'string',
        'body' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'creation_time' => 'creationTime',
        'event_type' => 'eventType',
        'event_id' => 'eventId',
        'event_time' => 'eventTime',
        'entity_type' => 'entityType',
        'entity_id' => 'entityId',
        'target_entity_type' => 'targetEntityType',
        'target_entity_id' => 'targetEntityId',
        'body' => 'body'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'creation_time' => 'setCreationTime',
        'event_type' => 'setEventType',
        'event_id' => 'setEventId',
        'event_time' => 'setEventTime',
        'entity_type' => 'setEntityType',
        'entity_id' => 'setEntityId',
        'target_entity_type' => 'setTargetEntityType',
        'target_entity_id' => 'setTargetEntityId',
        'body' => 'setBody'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'creation_time' => 'getCreationTime',
        'event_type' => 'getEventType',
        'event_id' => 'getEventId',
        'event_time' => 'getEventTime',
        'entity_type' => 'getEntityType',
        'entity_id' => 'getEntityId',
        'target_entity_type' => 'getTargetEntityType',
        'target_entity_id' => 'getTargetEntityId',
        'body' => 'getBody'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const EVENT_TYPE_VIEW = 'view';
    const EVENT_TYPE_PURCHASE = 'purchase';
    const EVENT_TYPE_RECOMMEND = 'recommend';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_VIEW,
            self::EVENT_TYPE_PURCHASE,
            self::EVENT_TYPE_RECOMMEND,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_time'] = isset($data['event_time']) ? $data['event_time'] : null;
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['target_entity_type'] = isset($data['target_entity_type']) ? $data['target_entity_type'] : null;
        $this->container['target_entity_id'] = isset($data['target_entity_id']) ? $data['target_entity_id'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("view", "purchase", "recommend");
        if (!in_array($this->container['event_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'event_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("view", "purchase", "recommend");
        if (!in_array($this->container['event_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets creation_time
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param string $creation_time Read-only
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets event_type
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     * @param string $event_type Type of event, consumer cannot set recommend
     * @return $this
     */
    public function setEventType($event_type)
    {
        $allowed_values = array('view', 'purchase', 'recommend');
        if (!is_null($event_type) && (!in_array($event_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'event_type', must be one of 'view', 'purchase', 'recommend'");
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets event_id
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     * @param string $event_id Read-only
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_time
     * @return string
     */
    public function getEventTime()
    {
        return $this->container['event_time'];
    }

    /**
     * Sets event_time
     * @param string $event_time Read-only
     * @return $this
     */
    public function setEventTime($event_time)
    {
        $this->container['event_time'] = $event_time;

        return $this;
    }

    /**
     * Gets entity_type
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     * @param string $entity_type Read-only
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets entity_id
     * @return string
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     * @param string $entity_id The user that triggered this event. You are free to choose whatever you like but it has to be consistent. Good examples are email address, internal user id or sha256 hash of these values.
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets target_entity_type
     * @return string
     */
    public function getTargetEntityType()
    {
        return $this->container['target_entity_type'];
    }

    /**
     * Sets target_entity_type
     * @param string $target_entity_type Read-only
     * @return $this
     */
    public function setTargetEntityType($target_entity_type)
    {
        $this->container['target_entity_type'] = $target_entity_type;

        return $this;
    }

    /**
     * Gets target_entity_id
     * @return string
     */
    public function getTargetEntityId()
    {
        return $this->container['target_entity_id'];
    }

    /**
     * Sets target_entity_id
     * @param string $target_entity_id Way to identify your product. Use the product id from your shop
     * @return $this
     */
    public function setTargetEntityId($target_entity_id)
    {
        $this->container['target_entity_id'] = $target_entity_id;

        return $this;
    }

    /**
     * Gets body
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     * @param string $body Meta information that doesn't fit into above fields. Read-only
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Axxell\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Axxell\ObjectSerializer::sanitizeForSerialization($this));
    }
}


